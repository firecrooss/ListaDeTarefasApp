@page "/register"
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject UserManager<IdentityUser> UserManager

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Registrar</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@registerModel" OnValidSubmit="@HandleRegister" FormName="registerForm">
                        <DataAnnotationsValidator />
                        @if (showValidation)
                        {
                            <ValidationSummary />
                        }


                        <div class="mb-3">
                            <label class="form-label">Username</label>
                            <InputText @bind-Value="registerModel.Username" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Username)" />
                            @if (showValidation)
                            {
                                <ValidationMessage For="@(() => registerModel.Username)" />
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="registerModel.Email" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Email)" />
                            @if (showValidation)
                            {
                                <ValidationMessage For="@(() => registerModel.Email)" />
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Senha</label>
                            <InputText type="password" @bind-Value="registerModel.Password" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Password)" />
                            @if (showValidation)
                            {
                                <ValidationMessage For="@(() => registerModel.Password)" />
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Confirmar Senha</label>
                            <InputText type="password" @bind-Value="registerModel.ConfirmPassword" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                            @if (showValidation)
                            {
                                <ValidationMessage For="@(() => registerModel.Password)" />
                            }
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">Registrar</button>
                            <NavLink href="/login" class="btn btn-link">Já tem uma Conta? Login!</NavLink>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private bool showValidation = false;
    private EditContext? editContext;

    protected override void OnInitialized()
    {
        editContext = new EditContext(registerModel);
    }


    private async Task HandleRegister()
    {
        showValidation = true;

        if (editContext!.Validate())
        {
            var user = new IdentityUser
                {
                    UserName = registerModel.Username,
                    Email = registerModel.Email
                };

            var result = await UserManager.CreateAsync(user, registerModel.Password);

            if (result.Succeeded)
            {
                Navigation.NavigateTo("/tarefas");
            }
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Username é Obrigatório!")]
        [StringLength(20, MinimumLength = 3, ErrorMessage = "Username precisa ter entre 3-20 caracteres")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email é obrigatório!")]
        [EmailAddress(ErrorMessage = "Email inválido")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Senha é Obrigatória!")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Senha há de ter pelo menos 6 letras")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Por Favor Confirme a Senha!")]
        [Compare("Password", ErrorMessage = "As senhas não são iguais")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}